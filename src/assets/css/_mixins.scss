@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}


@mixin box($size) {
  display: inline-block;
  @include size($size);
}

@mixin fp-make-sprites-icons($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .fp-icon--#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}

@mixin fp-clear-list() {
  list-style: none;
  padding: 0;
  margin: 0;
  > li {
    padding: 0;
  }
}

@mixin fp-make-container() {
    @include container-fixed($fp-gutter);

    @media (min-width: $screen-sm-min) {
      width: $container-sm;
    }
    @media (min-width: $screen-md-min) {
      width: $container-md;
    }
    @media (min-width: $screen-lg-min) {
      width: $container-lg;
    }
  //min-width: 768px;
}

@mixin fp-make-sm-container() {
  @include container-fixed($fp-gutter * 2);

  @media (min-width: $screen-sm-min) {
    width: $container-sm + 20px;
  }
}


@mixin fp-hide ($size) {
  @media (max-width: $size) {
    display: none;
  }
}

@mixin fp-button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;
  box-shadow: 0px 4px 0px 0px $border;

  &:focus,
  &.focus {
    color: $color;
    background-color: lighten($background, 10%);
  }
  &:hover {
    color: $color;
    background-color: lighten($background, 10%);
  }

  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: darken($background, 10%);
    box-shadow: 0px 4px 0px 0px darken($background, 10%);

    //border-color: darken($border, 12%);

  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled]{
    cursor: $cursor-disabled;
    background: darken($background, 20%);
    box-shadow: 0px 4px 0px 0px lighten($background, 20%);
    &:hover{
      cursor: $cursor-disabled;
      background: darken($background, 20%);
      box-shadow: 0px 4px 0px 0px lighten($background, 20%);
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}



@mixin fp-button-variant-pnp($color, $background, $background-start, $background-finish) {
  color: $color;
  background: $background linear-gradient(to bottom, $background-start, $background-finish);

  &:focus,
  &.focus {
    color: $color;
    background: lighten($background, 10%) linear-gradient(to bottom, lighten($background-start, 10%), lighten($background-finish, 10%));
  }
  &:hover {
    color: $color;
    background: lighten($background, 10%) linear-gradient(to bottom, lighten($background-start, 10%), lighten($background-finish, 10%));
  }

  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background: darken($background, 10%) linear-gradient(to bottom, darken($background-start, 10%), darken($background-finish, 10%));

  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    //background-image: none;
  }
  &.disabled,
  &[disabled]{
    cursor: $cursor-disabled;
    background: darken($background, 20%) linear-gradient(to bottom, darken($background-start, 20%), darken($background-finish, 20%));
    &:hover{
      cursor: $cursor-disabled;
      background: darken($background, 20%) linear-gradient(to bottom, darken($background-start, 20%), darken($background-finish, 20%));
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}


@mixin fn-make-text-shadow () {
  text-shadow: 0 0 4px rgba(0,0,0,0.2);
}

@mixin fp-reset-text() {
  font-family: $fp-font-base;
  // We deliberately do NOT reset font-size.
  font-style: normal;
  font-weight: normal;
  letter-spacing: normal;
  line-break: auto;
  line-height: $fp-line-height-base;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  white-space: normal;
  word-break: normal;
  word-spacing: normal;
  word-wrap: normal;
}

@mixin fp-make-shadow($thickness, $background-color) {
  box-shadow: 0px $thickness 0px 0px darken($background-color, 15%);
}

@mixin fp-make-ribon($height, $thickness, $background-color){
  height: $height;
  color: white;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  position: relative;
  box-shadow: 0 $thickness 0 0 darken($background-color, 15%);

  &:after, &:before {
    position: absolute;
    content: '';
    display: block;
    border-bottom: $height solid $background-color;
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    height: 0;
    left: 0;
    width: 100%;
    box-sizing: border-box;
    top: 0;
  }

  &:before {
    transform: rotate(180deg);
  }

  &-inner {
    position: relative;
    height: $height;
    z-index: 1;
    text-align: center;
    padding: 0 $height;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    margin: 0;
  }

}

//
//  Function to create an optimized svg url
//
@function svg-url($svg){
  //
  //  Add missing namespace
  //
  @if not str-index($svg,xmlns) {
    $svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk,'"', '\'');
    $chunk: str-replace($chunk,'%', '%25');
    $chunk: str-replace($chunk,'&', '%26');
    $chunk: str-replace($chunk,'#', '%23');
    $chunk: str-replace($chunk,'{', '%7B');
    $chunk: str-replace($chunk,'}', '%7D');
    $chunk: str-replace($chunk,'<', '%3C');
    $chunk: str-replace($chunk,'>', '%3E');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg){
  background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @return if($index,
          str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
          $string);
}


@mixin label-set-color ($color) {
  background-color: $color;
  &:before{
    border-color: darken($color, 15%) transparent transparent transparent;
  }

  &:after{
    background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 70 300" preserveAspectRatio="xMinYMid"><polygon points="0,0 70,0 10,150 70,300 0,300"  fill="'+$color+'"/></svg>');
  }
}

@mixin fp-make-label ($fontSize, $index) {
  $label-color-bg-default: rgb(100, 100, 100);
  $label-color-bg-new:     rgb(213, 123, 144);
  $label-color-bg-latest:  rgb(105, 162, 249);
  $label-color-bg-money:  $fp-color-contrast;
  $label-color-bg-jackpot: rgb(220, 111, 65);
  $label-color-bg-freespins: $fp-color-success;
  $label-color-bg-unique: $fp-color-unique;

  $label-color-default: rgb(255, 255, 255);
  $label-color-jackpot: rgb(249, 239, 70);
  //$fontCompensation: $index / 4;


  position: absolute;
  z-index: 5;
  font-size:$fontSize;
  display: flex;
  justify-content: center;
  align-items: center;
  background: grey;
  line-height: 1em;
  padding: 0.3em * $index 0.5em * $index 0.3em * $index 0.5em * $index;
  left: -0.55em;
  top:1.5em;
  text-transform: uppercase;
  color: $label-color-default;
  @include fn-make-text-shadow();

  &:before, &:after {
    content:      '';
    position:     absolute;
    display:      block;
  }

  &:before {
    border-style: solid;
    top:       100%;
    left:         0;
    border-width: 0.6em 0 0 0.6em;
  }

  &:after {
    fill: red;
    background-size: 110%;
    background-position: center;
    background-repeat: no-repeat;
    top:0;
    left: 100%;
    height:100%;
    width:2em;
  }

  @include label-set-color($label-color-bg-default);

  &--new {
    @include label-set-color($label-color-bg-new);
  }

  &--latest {
    @include label-set-color($label-color-bg-latest);
  }

  &--jackpot {
    color: $label-color-jackpot;
    @include label-set-color($label-color-bg-jackpot);
  }

  &--freespins {
    @include label-set-color($label-color-bg-freespins);
  }

  &--unique {
    @include label-set-color($label-color-bg-unique);
  }

  &--shop {
    @include label-set-color($label-color-bg-freespins);
  }

  &--money {
    @include label-set-color($label-color-bg-money);
  }

}

@mixin fp-make-dark-themed-border {
  border: 2px solid #33FE76;
  box-shadow: 0 0 10px 0 rgba(129, 250, 127, 0.8), inset 0 0 10px 0 rgba(129, 250, 127, 0.8)!important;
}
